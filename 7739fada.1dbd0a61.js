(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{145:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return d})),a.d(t,"default",(function(){return o}));var n=a(2),i=a(9),b=(a(0),a(158)),r={id:"_thing_add_",title:"thing/add",sidebar_label:"thing/add"},l={id:"api/modules/_thing_add_",title:"thing/add",description:'lit-solid \u203a "thing/add"',source:"@site/docs/api/modules/_thing_add_.md",permalink:"/lit-solid/docs/api/modules/_thing_add_",editUrl:"https://github.com/inrupt/lit-solid/edit/master/website/docs/api/modules/_thing_add_.md",sidebar_label:"thing/add",sidebar:"api",previous:{title:"thing",permalink:"/lit-solid/docs/api/modules/_thing_"},next:{title:"thing/get",permalink:"/lit-solid/docs/api/modules/_thing_get_"}},d=[{value:"Index",id:"index",children:[{value:"Functions",id:"functions",children:[]}]},{value:"Functions",id:"functions-1",children:[{value:"<code>Const</code> addBoolean",id:"const-addboolean",children:[]},{value:"<code>Const</code> addDatetime",id:"const-adddatetime",children:[]},{value:"<code>Const</code> addDecimal",id:"const-adddecimal",children:[]},{value:"<code>Const</code> addInteger",id:"const-addinteger",children:[]},{value:"<code>Const</code> addIri",id:"const-addiri",children:[]},{value:"addStringInLocale",id:"addstringinlocale",children:[]},{value:"<code>Const</code> addStringUnlocalized",id:"const-addstringunlocalized",children:[]}]}],c={rightToc:d};function o(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/lit-solid/docs/api/index"}),"lit-solid")," \u203a ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/lit-solid/docs/api/modules/_thing_add_"}),'"thing/add"')),Object(b.b)("h2",{id:"index"},"Index"),Object(b.b)("h3",{id:"functions"},"Functions"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"/lit-solid/docs/api/modules/_thing_add_#const-addboolean"}),"addBoolean")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"/lit-solid/docs/api/modules/_thing_add_#const-adddatetime"}),"addDatetime")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"/lit-solid/docs/api/modules/_thing_add_#const-adddecimal"}),"addDecimal")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"/lit-solid/docs/api/modules/_thing_add_#const-addinteger"}),"addInteger")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"/lit-solid/docs/api/modules/_thing_add_#const-addiri"}),"addIri")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"/lit-solid/docs/api/modules/_thing_add_#addstringinlocale"}),"addStringInLocale")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"/lit-solid/docs/api/modules/_thing_add_#const-addstringunlocalized"}),"addStringUnlocalized"))),Object(b.b)("h2",{id:"functions-1"},"Functions"),Object(b.b)("h3",{id:"const-addboolean"},Object(b.b)("inlineCode",{parentName:"h3"},"Const")," addBoolean"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"addBoolean"),"(",Object(b.b)("inlineCode",{parentName:"p"},"thing"),": T, ",Object(b.b)("inlineCode",{parentName:"p"},"predicate"),": string | NamedNode\u2039string\u203a, ",Object(b.b)("inlineCode",{parentName:"p"},"value"),": boolean)"),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(n.a)({parentName:"em"},{href:"https://github.com/inrupt/lit-solid/blob/5d914ac/src/thing/add.ts#L58"}),"thing/add.ts:58"))),Object(b.b)("p",null,"Create a new Thing with a boolean added for a Predicate."),Object(b.b)("p",null,"This preserves existing values for the given Predicate. To replace them, see ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/lit-solid/docs/api/modules/_thing_set_#const-setboolean"}),"setBoolean"),"."),Object(b.b)("p",null,"The original ",Object(b.b)("inlineCode",{parentName:"p"},"thing")," is not modified; this function returns a cloned Thing with updated values."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Parameters:")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"thing")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"T"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Thing to add a boolean value to.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"predicate")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string ","|"," NamedNode\u2039string\u203a"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Predicate for which to add the given boolean value.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"value")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"boolean"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boolean to add to ",Object(b.b)("inlineCode",{parentName:"td"},"thing")," for the given ",Object(b.b)("inlineCode",{parentName:"td"},"predicate"),".")))),Object(b.b)("hr",null),Object(b.b)("h3",{id:"const-adddatetime"},Object(b.b)("inlineCode",{parentName:"h3"},"Const")," addDatetime"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"addDatetime"),"(",Object(b.b)("inlineCode",{parentName:"p"},"thing"),": T, ",Object(b.b)("inlineCode",{parentName:"p"},"predicate"),": string | NamedNode\u2039string\u203a, ",Object(b.b)("inlineCode",{parentName:"p"},"value"),": Date)"),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(n.a)({parentName:"em"},{href:"https://github.com/inrupt/lit-solid/blob/5d914ac/src/thing/add.ts#L79"}),"thing/add.ts:79"))),Object(b.b)("p",null,"Create a new Thing with a datetime added for a Predicate."),Object(b.b)("p",null,"This preserves existing values for the given Predicate. To replace them, see ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/lit-solid/docs/api/modules/_thing_set_#const-setdatetime"}),"setDatetime"),"."),Object(b.b)("p",null,"The original ",Object(b.b)("inlineCode",{parentName:"p"},"thing")," is not modified; this function returns a cloned Thing with updated values."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Parameters:")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"thing")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"T"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Thing to add a datetime value to.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"predicate")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string ","|"," NamedNode\u2039string\u203a"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Predicate for which to add the given datetime value.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"value")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Date"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Datetime to add to ",Object(b.b)("inlineCode",{parentName:"td"},"thing")," for the given ",Object(b.b)("inlineCode",{parentName:"td"},"predicate"),".")))),Object(b.b)("hr",null),Object(b.b)("h3",{id:"const-adddecimal"},Object(b.b)("inlineCode",{parentName:"h3"},"Const")," addDecimal"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"addDecimal"),"(",Object(b.b)("inlineCode",{parentName:"p"},"thing"),": T, ",Object(b.b)("inlineCode",{parentName:"p"},"predicate"),": string | NamedNode\u2039string\u203a, ",Object(b.b)("inlineCode",{parentName:"p"},"value"),": number)"),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(n.a)({parentName:"em"},{href:"https://github.com/inrupt/lit-solid/blob/5d914ac/src/thing/add.ts#L100"}),"thing/add.ts:100"))),Object(b.b)("p",null,"Create a new Thing with a decimal added for a Predicate."),Object(b.b)("p",null,"This preserves existing values for the given Predicate. To replace them, see ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/lit-solid/docs/api/modules/_thing_set_#const-setdecimal"}),"setDecimal"),"."),Object(b.b)("p",null,"The original ",Object(b.b)("inlineCode",{parentName:"p"},"thing")," is not modified; this function returns a cloned Thing with updated values."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Parameters:")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"thing")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"T"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Thing to add a decimal value to.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"predicate")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string ","|"," NamedNode\u2039string\u203a"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Predicate for which to add the given decimal value.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"value")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Decimal to add to ",Object(b.b)("inlineCode",{parentName:"td"},"thing")," for the given ",Object(b.b)("inlineCode",{parentName:"td"},"predicate"),".")))),Object(b.b)("hr",null),Object(b.b)("h3",{id:"const-addinteger"},Object(b.b)("inlineCode",{parentName:"h3"},"Const")," addInteger"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"addInteger"),"(",Object(b.b)("inlineCode",{parentName:"p"},"thing"),": T, ",Object(b.b)("inlineCode",{parentName:"p"},"predicate"),": string | NamedNode\u2039string\u203a, ",Object(b.b)("inlineCode",{parentName:"p"},"value"),": number)"),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(n.a)({parentName:"em"},{href:"https://github.com/inrupt/lit-solid/blob/5d914ac/src/thing/add.ts#L121"}),"thing/add.ts:121"))),Object(b.b)("p",null,"Create a new Thing with an integer added for a Predicate."),Object(b.b)("p",null,"This preserves existing values for the given Predicate. To replace them, see ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/lit-solid/docs/api/modules/_thing_set_#const-setinteger"}),"setInteger"),"."),Object(b.b)("p",null,"The original ",Object(b.b)("inlineCode",{parentName:"p"},"thing")," is not modified; this function returns a cloned Thing with updated values."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Parameters:")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"thing")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"T"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Thing to add an integer value to.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"predicate")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string ","|"," NamedNode\u2039string\u203a"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Predicate for which to add the given integer value.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"value")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Integer to add to ",Object(b.b)("inlineCode",{parentName:"td"},"thing")," for the given ",Object(b.b)("inlineCode",{parentName:"td"},"predicate"),".")))),Object(b.b)("hr",null),Object(b.b)("h3",{id:"const-addiri"},Object(b.b)("inlineCode",{parentName:"h3"},"Const")," addIri"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"addIri"),"(",Object(b.b)("inlineCode",{parentName:"p"},"thing"),": T, ",Object(b.b)("inlineCode",{parentName:"p"},"predicate"),": string | NamedNode\u2039string\u203a, ",Object(b.b)("inlineCode",{parentName:"p"},"iri"),": string | NamedNode\u2039string\u203a | DatasetCore\u2039Quad, Quad\u203a & object | DatasetCore\u2039Quad, Quad\u203a & object)"),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(n.a)({parentName:"em"},{href:"https://github.com/inrupt/lit-solid/blob/5d914ac/src/thing/add.ts#L34"}),"thing/add.ts:34"))),Object(b.b)("p",null,"Create a new Thing with an IRI added for a Predicate."),Object(b.b)("p",null,"This preserves existing values for the given Predicate. To replace them, see ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/lit-solid/docs/api/modules/_thing_set_#const-setiri"}),"setIri"),"."),Object(b.b)("p",null,"The original ",Object(b.b)("inlineCode",{parentName:"p"},"thing")," is not modified; this function returns a cloned Thing with updated values."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Parameters:")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"thing")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"T"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Thing to add an IRI value to.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"predicate")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string ","|"," NamedNode\u2039string\u203a"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Predicate for which to add the given IRI value.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"iri")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string ","|"," NamedNode\u2039string\u203a ","|"," DatasetCore\u2039Quad, Quad\u203a & object ","|"," DatasetCore\u2039Quad, Quad\u203a & object"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-")))),Object(b.b)("hr",null),Object(b.b)("h3",{id:"addstringinlocale"},"addStringInLocale"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"addStringInLocale"),"\u2039",Object(b.b)("strong",{parentName:"p"},"T"),"\u203a(",Object(b.b)("inlineCode",{parentName:"p"},"thing"),": T, ",Object(b.b)("inlineCode",{parentName:"p"},"predicate"),": ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/lit-solid/docs/api/modules/_interfaces_#iri"}),"Iri")," | ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/lit-solid/docs/api/modules/_interfaces_#iristring"}),"IriString"),", ",Object(b.b)("inlineCode",{parentName:"p"},"value"),": string, ",Object(b.b)("inlineCode",{parentName:"p"},"locale"),": string): ",Object(b.b)("em",{parentName:"p"},"T extends ThingLocal ? ThingLocal : ThingPersisted")),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(n.a)({parentName:"em"},{href:"https://github.com/inrupt/lit-solid/blob/5d914ac/src/thing/add.ts#L143"}),"thing/add.ts:143"))),Object(b.b)("p",null,"Create a new Thing with a localised string added for a Predicate."),Object(b.b)("p",null,"This preserves existing values for the given Predicate. To replace them, see ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/lit-solid/docs/api/modules/_thing_set_#setstringinlocale"}),"setStringInLocale"),"."),Object(b.b)("p",null,"The original ",Object(b.b)("inlineCode",{parentName:"p"},"thing")," is not modified; this function returns a cloned Thing with updated values."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Type parameters:")),Object(b.b)("p",null,"\u25aa ",Object(b.b)("strong",{parentName:"p"},"T"),": ",Object(b.b)("em",{parentName:"p"},Object(b.b)("a",Object(n.a)({parentName:"em"},{href:"/lit-solid/docs/api/modules/_interfaces_#thing"}),"Thing"))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Parameters:")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"thing")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"T"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Thing to add a localised string value to.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"predicate")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/lit-solid/docs/api/modules/_interfaces_#iri"}),"Iri")," ","|"," ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/lit-solid/docs/api/modules/_interfaces_#iristring"}),"IriString")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Predicate for which to add the given string value.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"value")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"String to add to ",Object(b.b)("inlineCode",{parentName:"td"},"thing")," for the given ",Object(b.b)("inlineCode",{parentName:"td"},"predicate"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"locale")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Locale of the added string.")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("em",{parentName:"p"},"T extends ThingLocal ? ThingLocal : ThingPersisted")),Object(b.b)("p",null,"A new Thing equal to the input Thing with the given value added for the given Predicate."),Object(b.b)("hr",null),Object(b.b)("h3",{id:"const-addstringunlocalized"},Object(b.b)("inlineCode",{parentName:"h3"},"Const")," addStringUnlocalized"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"addStringUnlocalized"),"(",Object(b.b)("inlineCode",{parentName:"p"},"thing"),": T, ",Object(b.b)("inlineCode",{parentName:"p"},"predicate"),": string | NamedNode\u2039string\u203a, ",Object(b.b)("inlineCode",{parentName:"p"},"value"),": string)"),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(n.a)({parentName:"em"},{href:"https://github.com/inrupt/lit-solid/blob/5d914ac/src/thing/add.ts#L171"}),"thing/add.ts:171"))),Object(b.b)("p",null,"Create a new Thing with an unlocalised string added for a Predicate."),Object(b.b)("p",null,"This preserves existing values for the given Predicate. To replace them, see ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/lit-solid/docs/api/modules/_thing_set_#const-setstringunlocalized"}),"setStringUnlocalized"),"."),Object(b.b)("p",null,"The original ",Object(b.b)("inlineCode",{parentName:"p"},"thing")," is not modified; this function returns a cloned Thing with updated values."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Parameters:")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"thing")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"T"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Thing to add an unlocalised string value to.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"predicate")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string ","|"," NamedNode\u2039string\u203a"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Predicate for which to add the given string value.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"value")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"String to add to ",Object(b.b)("inlineCode",{parentName:"td"},"thing")," for the given ",Object(b.b)("inlineCode",{parentName:"td"},"predicate"),".")))))}o.isMDXComponent=!0},158:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),o=function(e){var t=i.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=o(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},O={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},j=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,r=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=o(a),j=n,m=p["".concat(r,".").concat(j)]||p[j]||O[j]||b;return a?i.a.createElement(m,l(l({ref:t},c),{},{components:a})):i.a.createElement(m,l({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,r=new Array(b);r[0]=j;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:n,r[1]=l;for(var c=2;c<b;c++)r[c]=a[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,a)}j.displayName="MDXCreateElement"}}]);